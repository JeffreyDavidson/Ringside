<?php

declare(strict_types=1);

use App\Models\Managers\Manager;
use Laravel\Dusk\Browser;

/**
 * Browser tests for Manager Form Modal component interactions.
 * 
 * These tests focus specifically on the modal form behavior, including:
 * - Modal opening and closing animations
 * - Form validation feedback
 * - Input field interactions
 * - Submit button states
 * - Error handling display
 */

describe('Manager Form Modal Opening and Closing', function () {
    test('create manager modal opens with correct animation', function () {
        // When & Then: Test modal opening behavior
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->screenshot('before-manager-modal-open')
                    ->pause(1000);

            // Look for create button and test modal opening
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500) // Wait for animation
                        ->screenshot('manager-modal-opening')
                        ->pause(500); // Complete animation

                // Verify modal is visible
                if ($browser->element('.modal, [role="dialog"], .modal-backdrop')) {
                    $browser->screenshot('manager-modal-opened-successfully')
                            ->assertVisible('.modal, [role="dialog"]');
                } else {
                    $browser->screenshot('manager-modal-failed-to-open');
                }
            } else {
                $browser->screenshot('create-manager-button-not-found');
            }
        });
    });

    test('manager modal closes with escape key', function () {
        // When & Then: Test modal closing with keyboard
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(1000);

            // Open modal first
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500)
                        ->screenshot('manager-modal-before-escape');

                // Test escape key closing
                $browser->keys('body', ['{escape}'])
                        ->pause(500)
                        ->screenshot('manager-modal-after-escape');

                // Verify modal is closed
                if (!$browser->element('.modal:visible, [role="dialog"]:visible')) {
                    $browser->screenshot('manager-modal-closed-successfully');
                } else {
                    $browser->screenshot('manager-modal-failed-to-close');
                }
            }
        });
    });

    test('manager modal closes with backdrop click', function () {
        // When & Then: Test modal closing with backdrop click
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(1000);

            // Open modal first
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500)
                        ->screenshot('manager-modal-before-backdrop-click');

                // Click backdrop to close modal
                if ($browser->element('.modal-backdrop, .backdrop')) {
                    $browser->click('.modal-backdrop, .backdrop')
                            ->pause(500)
                            ->screenshot('manager-modal-after-backdrop-click');
                } else {
                    $browser->screenshot('manager-modal-backdrop-not-found');
                }
            }
        });
    });
});

describe('Manager Form Field Interactions', function () {
    test('manager name field accepts input and validates', function () {
        // When & Then: Test name field interaction
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(1000);

            // Open modal and test name field
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500);

                // Test name input field
                if ($browser->element('input[name="name"], #manager_name, .manager-name-input')) {
                    $browser->type('input[name="name"], #manager_name, .manager-name-input', 'Paul Bearer')
                            ->pause(300)
                            ->screenshot('manager-name-field-filled')
                            ->assertInputValue('input[name="name"], #manager_name, .manager-name-input', 'Paul Bearer');
                } else {
                    $browser->screenshot('manager-name-field-not-found');
                }
            }
        });
    });

    test('manager hometown field accepts input', function () {
        // When & Then: Test hometown field interaction
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(1000);

            // Open modal and test hometown field
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500);

                // Test hometown input field
                if ($browser->element('input[name="hometown"], #manager_hometown, .manager-hometown-input')) {
                    $browser->type('input[name="hometown"], #manager_hometown, .manager-hometown-input', 'Death Valley')
                            ->pause(300)
                            ->screenshot('manager-hometown-field-filled')
                            ->assertInputValue('input[name="hometown"], #manager_hometown, .manager-hometown-input', 'Death Valley');
                } else {
                    $browser->screenshot('manager-hometown-field-not-found');
                }
            }
        });
    });

    test('manager form validation displays errors correctly', function () {
        // When & Then: Test validation error display
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(1000);

            // Open modal and test validation
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500);

                // Try to submit empty form
                if ($browser->element('button[type="submit"], .submit-btn, .save-btn')) {
                    $browser->click('button[type="submit"], .submit-btn, .save-btn')
                            ->pause(1000)
                            ->screenshot('manager-form-validation-errors');

                    // Look for error messages
                    if ($browser->element('.error, .invalid-feedback, .text-danger, .validation-error')) {
                        $browser->screenshot('manager-validation-errors-visible');
                    } else {
                        $browser->screenshot('manager-validation-errors-not-visible');
                    }
                } else {
                    $browser->screenshot('manager-submit-button-not-found');
                }
            }
        });
    });

    test('manager form accepts complete valid input', function () {
        // When & Then: Test complete form submission
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(1000);

            // Open modal and fill complete form
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500);

                // Fill all required fields
                if ($browser->element('input[name="name"]')) {
                    $browser->type('input[name="name"]', 'Jimmy Hart');

                    if ($browser->element('input[name="hometown"]')) {
                        $browser->type('input[name="hometown"]', 'Nashville, Tennessee');
                    }

                    $browser->screenshot('manager-form-completely-filled');

                    // Submit the form
                    if ($browser->element('button[type="submit"], .submit-btn, .save-btn')) {
                        $browser->click('button[type="submit"], .submit-btn, .save-btn')
                                ->pause(2000)
                                ->screenshot('manager-form-submitted');

                        // Verify success (would appear in table or redirect)
                        $browser->assertSee('Jimmy Hart');
                    }
                }
            }
        });
    });
});

describe('Edit Manager Modal Functionality', function () {
    test('edit manager modal pre-fills with existing manager data', function () {
        // Given: An existing manager to edit
        $manager = Manager::factory()->create([
            'name' => 'Existing Manager',
            'hometown' => 'Original Hometown'
        ]);

        // When & Then: Test edit modal pre-population
        $this->browse(function (Browser $browser) use ($manager) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(2000);

            // Look for edit action for the specific manager
            if ($browser->element('[data-testid="edit-manager-' . $manager->id . '"], .edit-manager-btn')) {
                $browser->click('[data-testid="edit-manager-' . $manager->id . '"], .edit-manager-btn')
                        ->pause(500)
                        ->screenshot('edit-manager-modal-opened');

                // Verify form is pre-filled
                if ($browser->element('input[name="name"], #manager_name')) {
                    $browser->screenshot('edit-manager-form-prefilled')
                            ->assertInputValue('input[name="name"], #manager_name', 'Existing Manager');
                } else {
                    $browser->screenshot('edit-manager-form-fields-not-found');
                }
            } else {
                $browser->screenshot('edit-manager-button-not-found');
            }
        });
    });

    test('edit manager modal saves changes correctly', function () {
        // Given: An existing manager to edit
        $manager = Manager::factory()->create([
            'name' => 'Original Manager Name',
            'hometown' => 'Original Hometown'
        ]);

        // When & Then: Test editing and saving
        $this->browse(function (Browser $browser) use ($manager) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(2000);

            // Open edit modal and make changes
            if ($browser->element('[data-testid="edit-manager-' . $manager->id . '"], .edit-manager-btn')) {
                $browser->click('[data-testid="edit-manager-' . $manager->id . '"], .edit-manager-btn')
                        ->pause(500);

                // Update the name
                if ($browser->element('input[name="name"], #manager_name')) {
                    $browser->clear('input[name="name"], #manager_name')
                            ->type('input[name="name"], #manager_name', 'Updated Manager Name')
                            ->pause(300);

                    // Update hometown if field exists
                    if ($browser->element('input[name="hometown"], #manager_hometown')) {
                        $browser->clear('input[name="hometown"], #manager_hometown')
                                ->type('input[name="hometown"], #manager_hometown', 'Updated Hometown');
                    }

                    $browser->screenshot('edit-manager-form-updated');

                    // Submit the form
                    if ($browser->element('button[type="submit"], .submit-btn, .save-btn')) {
                        $browser->click('button[type="submit"], .submit-btn, .save-btn')
                                ->pause(2000)
                                ->screenshot('edit-manager-form-submitted');

                        // Verify the change is reflected in the table
                        $browser->assertSee('Updated Manager Name');
                    }
                }
            }
        });
    });

    test('edit manager modal handles validation errors', function () {
        // Given: An existing manager to edit
        $manager = Manager::factory()->create([
            'name' => 'Valid Manager',
            'hometown' => 'Valid Hometown'
        ]);

        // When & Then: Test edit validation
        $this->browse(function (Browser $browser) use ($manager) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(2000);

            // Open edit modal and create invalid state
            if ($browser->element('[data-testid="edit-manager-' . $manager->id . '"], .edit-manager-btn')) {
                $browser->click('[data-testid="edit-manager-' . $manager->id . '"], .edit-manager-btn')
                        ->pause(500);

                // Clear required field to trigger validation
                if ($browser->element('input[name="name"], #manager_name')) {
                    $browser->clear('input[name="name"], #manager_name')
                            ->pause(300)
                            ->screenshot('edit-manager-name-cleared');

                    // Try to submit with invalid data
                    if ($browser->element('button[type="submit"], .submit-btn, .save-btn')) {
                        $browser->click('button[type="submit"], .submit-btn, .save-btn')
                                ->pause(1000)
                                ->screenshot('edit-manager-validation-error');

                        // Look for validation errors
                        if ($browser->element('.error, .invalid-feedback, .text-danger')) {
                            $browser->screenshot('edit-manager-validation-errors-shown');
                        }
                    }
                }
            }
        });
    });
});

describe('Manager Form Submission States', function () {
    test('manager submit button shows loading state during submission', function () {
        // When & Then: Test submit button loading state
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(1000);

            // Open modal and fill form
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500);

                // Fill required fields
                if ($browser->element('input[name="name"]')) {
                    $browser->type('input[name="name"]', 'Loading Test Manager');

                    if ($browser->element('input[name="hometown"]')) {
                        $browser->type('input[name="hometown"]', 'Loading Test City');
                    }

                    $browser->screenshot('manager-form-ready-to-submit');

                    // Submit and check loading state
                    if ($browser->element('button[type="submit"], .submit-btn')) {
                        $browser->click('button[type="submit"], .submit-btn')
                                ->pause(100) // Quick screenshot during loading
                                ->screenshot('manager-submit-button-loading');

                        // Check if button shows loading state
                        if ($browser->element('.loading, .spinner, [disabled]')) {
                            $browser->screenshot('manager-loading-state-detected');
                        } else {
                            $browser->screenshot('manager-loading-state-not-detected');
                        }
                    }
                }
            }
        });
    });

    test('manager form prevents double submission', function () {
        // When & Then: Test double submission prevention
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(1000);

            // Open modal and fill form
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500);

                // Fill form
                if ($browser->element('input[name="name"]')) {
                    $browser->type('input[name="name"]', 'Double Submit Test Manager');

                    if ($browser->element('input[name="hometown"]')) {
                        $browser->type('input[name="hometown"]', 'Double Submit City');
                    }

                    // Try rapid double-click
                    if ($browser->element('button[type="submit"], .submit-btn')) {
                        $browser->doubleClick('button[type="submit"], .submit-btn')
                                ->pause(1000)
                                ->screenshot('manager-double-submit-attempt');

                        // Verify only one manager was created (would need database verification in real test)
                        // For browser test, just verify UI state
                        $browser->screenshot('manager-after-double-submit');
                    }
                }
            }
        });
    });

    test('manager form handles server errors gracefully', function () {
        // When & Then: Test server error handling
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(1000);

            // Open modal and test error scenario
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500);

                // Fill form with potentially problematic data
                if ($browser->element('input[name="name"]')) {
                    $browser->type('input[name="name"]', 'Error Test Manager')
                            ->screenshot('manager-error-test-form-filled');

                    // Submit and monitor for error handling
                    if ($browser->element('button[type="submit"], .submit-btn')) {
                        $browser->click('button[type="submit"], .submit-btn')
                                ->pause(2000)
                                ->screenshot('manager-error-handling-test');

                        // Form should handle any errors gracefully
                        $browser->screenshot('manager-error-handling-complete');
                    }
                }
            }
        });
    });
});

describe('Mobile Manager Modal Interactions', function () {
    test('manager form modal works correctly on mobile devices', function () {
        // When & Then: Test modal on mobile viewport
        $this->browse(function (Browser $browser) {
            $browser->resize(375, 667) // iPhone SE dimensions
                    ->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(2000)
                    ->screenshot('mobile-managers-page');

            // Test modal opening on mobile
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500)
                        ->screenshot('mobile-manager-modal-opened');

                // Test form interaction on mobile
                if ($browser->element('input[name="name"]')) {
                    $browser->type('input[name="name"]', 'Mobile Test Manager')
                            ->pause(300)
                            ->screenshot('mobile-manager-form-filled');
                }

                // Test modal scrolling if needed
                if ($browser->element('.modal-body, .modal-content')) {
                    $browser->screenshot('mobile-manager-modal-scrollable');
                }
            }
        });
    });

    test('mobile manager modal closes correctly with touch interactions', function () {
        // When & Then: Test mobile touch interactions
        $this->browse(function (Browser $browser) {
            $browser->resize(375, 667)
                    ->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(2000);

            // Open modal
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500)
                        ->screenshot('mobile-manager-modal-before-close');

                // Test close button on mobile
                if ($browser->element('.close, .modal-close, [data-dismiss="modal"]')) {
                    $browser->click('.close, .modal-close, [data-dismiss="modal"]')
                            ->pause(500)
                            ->screenshot('mobile-manager-modal-after-close');
                }
            }
        });
    });

    test('manager form fields work correctly on mobile keyboards', function () {
        // When & Then: Test mobile keyboard interactions
        $this->browse(function (Browser $browser) {
            $browser->resize(375, 667)
                    ->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(2000);

            // Open modal and test keyboard
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500);

                // Test name field with mobile keyboard
                if ($browser->element('input[name="name"]')) {
                    $browser->click('input[name="name"]')
                            ->pause(300)
                            ->screenshot('mobile-keyboard-name-focused')
                            ->type('input[name="name"]', 'Mobile Keyboard Manager');
                }

                // Test hometown field
                if ($browser->element('input[name="hometown"]')) {
                    $browser->click('input[name="hometown"]')
                            ->pause(300)
                            ->screenshot('mobile-keyboard-hometown-focused')
                            ->type('input[name="hometown"]', 'Mobile City');
                }

                $browser->screenshot('mobile-manager-form-complete');
            }
        });
    });
});

describe('Accessibility and Keyboard Navigation', function () {
    test('manager modal supports keyboard navigation', function () {
        // When & Then: Test keyboard accessibility
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(1000);

            // Open modal with keyboard (if button is focusable)
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500)
                        ->screenshot('manager-modal-keyboard-test');

                // Test tab navigation through form fields
                $browser->keys('body', ['{tab}'])
                        ->pause(200)
                        ->screenshot('manager-first-tab')
                        ->keys('body', ['{tab}'])
                        ->pause(200)
                        ->screenshot('manager-second-tab');

                // Test form submission with enter key
                if ($browser->element('input[name="name"]')) {
                    $browser->type('input[name="name"]', 'Keyboard Test Manager')
                            ->keys('input[name="name"]', ['{tab}'])
                            ->pause(300)
                            ->screenshot('manager-keyboard-navigation-complete');
                }
            }
        });
    });

    test('manager modal has proper focus management', function () {
        // When & Then: Test focus management
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(1000);

            // Test focus when modal opens
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500)
                        ->screenshot('manager-modal-focus-test');

                // Check if focus is properly set (would need to check document.activeElement in real test)
                $browser->screenshot('manager-modal-focus-set');
            }
        });
    });

    test('manager form supports screen reader navigation', function () {
        // When & Then: Test screen reader accessibility
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/managers')
                    ->pause(1000);

            // Open modal and check accessibility attributes
            if ($browser->element('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')) {
                $browser->click('[data-testid="create-manager-btn"], .create-manager, button:contains("Create")')
                        ->pause(500)
                        ->screenshot('manager-modal-accessibility-test');

                // Look for proper labels and ARIA attributes
                if ($browser->element('label[for], [aria-label], [aria-labelledby]')) {
                    $browser->screenshot('manager-form-labels-found');
                } else {
                    $browser->screenshot('manager-form-labels-missing');
                }

                // Check for form validation announcements
                if ($browser->element('[aria-describedby], [aria-invalid]')) {
                    $browser->screenshot('manager-form-validation-accessible');
                } else {
                    $browser->screenshot('manager-form-validation-not-accessible');
                }
            }
        });
    });
});