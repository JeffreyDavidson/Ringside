<?php

declare(strict_types=1);

use App\Models\Wrestlers\Wrestler;
use Laravel\Dusk\Browser;
use Tests\Browser\Pages\Wrestlers\WrestlerIndexPage;
use Tests\Browser\Pages\Wrestlers\WrestlerDetailPage;

/**
 * Dusk tests for wrestler management visual workflows.
 * 
 * These tests focus on visual elements, user interactions, and browser behavior
 * that Feature tests cannot cover. Tests the complete wrestler management interface
 * including table interactions, creation workflows, and detail page functionality.
 * 
 * @see WrestlersController For the controller being tested
 * @see WrestlersTable For the main table component
 * @see WrestlerForm For the creation/editing form
 * @see WrestlerFormModal For the modal wrapper
 */

test('wrestlers index page loads correctly', function () {
    $this->browse(function (Browser $browser) {
        $browser->loginAs($this->getAdminUser())
                ->visit(new WrestlerIndexPage())
                ->waitForPageLoad($browser)
                ->assertPageLoaded($browser);
        
        $this->takeScreenshot($browser, 'loaded-correctly');
    });
});

test('wrestlers table displays with proper structure', function () {
    // Given: Some wrestlers to display
    $wrestlers = Wrestler::factory()->count(3)->create();

    $this->browse(function (Browser $browser) use ($wrestlers) {
        $indexPage = $browser->loginAs($this->getAdminUser())
                             ->visit(new WrestlerIndexPage())
                             ->waitForPageLoad($browser)
                             ->assertTableHeadersVisible($browser);

        // Verify wrestlers are displayed
        foreach ($wrestlers as $wrestler) {
            $indexPage->assertWrestlerVisible($browser, $wrestler->name);
        }
        
        $indexPage->pageScreenshot($browser, 'proper-structure');
    });
});

test('create wrestler button is visible for administrators', function () {
    $this->browse(function (Browser $browser) {
        $browser->loginAs($this->getAdminUser())
                ->visit(new WrestlerIndexPage())
                ->waitForPageLoad($browser)
                ->assertCreateButtonVisible($browser);
        
        $this->takeScreenshot($browser, 'create-button-visible');
    });
});

test('wrestler detail page displays comprehensive information', function () {
    // Given: A wrestler with complete information
    $wrestler = Wrestler::factory()->create([
        'name' => 'Stone Cold Steve Austin',
        'hometown' => 'Austin, TX',
        'height' => 73, // 6'1"
        'weight' => 252,
        'signature_move' => 'Stone Cold Stunner'
    ]);

    $this->browse(function (Browser $browser) use ($wrestler) {
        $browser->loginAs($this->getAdminUser())
                ->visit(new WrestlerDetailPage($wrestler->id))
                ->waitForPageLoad($browser)
                ->assertWrestlerInfoVisible($browser, $wrestler->name)
                ->assertWrestlerData($browser, [
                    'name' => $wrestler->name,
                    'hometown' => $wrestler->hometown,
                    'signature_move' => $wrestler->signature_move
                ]);
        
        $this->takeScreenshot($browser, 'comprehensive-information');
    });
});

test('wrestler detail page shows livewire components', function () {
    $wrestler = Wrestler::factory()->create(['name' => 'Test Wrestler']);

    $this->browse(function (Browser $browser) use ($wrestler) {
        $browser->loginAs($this->getAdminUser())
                ->visit(new WrestlerDetailPage($wrestler->id))
                ->waitForPageLoad($browser)
                ->assertWrestlerInfoVisible($browser, $wrestler->name)
                ->assertLivewireComponentsLoaded($browser);
        
        $this->takeScreenshot($browser, 'livewire-components');
    });
});

test('wrestler table search functionality works', function () {
    // Given: Multiple wrestlers
    $targetWrestler = Wrestler::factory()->create(['name' => 'Unique Wrestler Name']);
    $otherWrestlers = Wrestler::factory()->count(3)->create();

    $this->browse(function (Browser $browser) use ($targetWrestler, $otherWrestlers) {
        $indexPage = $browser->loginAs($this->getAdminUser())
                             ->visit(new WrestlerIndexPage())
                             ->waitForPageLoad($browser);

        // Verify all wrestlers are initially visible
        $indexPage->assertWrestlerVisible($browser, $targetWrestler->name);
        foreach ($otherWrestlers as $wrestler) {
            $indexPage->assertWrestlerVisible($browser, $wrestler->name);
        }

        // Search for the unique wrestler
        $indexPage->searchForWrestler($browser, 'Unique')
                  ->assertWrestlerVisible($browser, $targetWrestler->name);
        
        // Verify other wrestlers are filtered out
        foreach ($otherWrestlers as $wrestler) {
            $indexPage->assertWrestlerNotVisible($browser, $wrestler->name);
        }
        
        $indexPage->pageScreenshot($browser, 'search-functionality-working');
    });
});

test('wrestler table status filter works', function () {
    // Given: Wrestlers with different statuses
    $employedWrestler = Wrestler::factory()->create(['name' => 'Employed Wrestler']);
    $unemployedWrestler = Wrestler::factory()->create(['name' => 'Unemployed Wrestler']);

    $this->browse(function (Browser $browser) use ($employedWrestler, $unemployedWrestler) {
        $browser->loginAs($this->getAdminUser())
                ->visit('/roster/wrestlers');
        
        $this->waitForPageLoad($browser);
        
        $this->assertTableContains($browser, $employedWrestler->name);
        $this->assertTableContains($browser, $unemployedWrestler->name);

        // Look for status filter dropdown
        $filterSelectors = [
            'select[name*="status"]',
            'select[wire\\:model*="status"]',
            '.filter select',
            '[data-filter] select'
        ];

        if ($this->safeClick($browser, $filterSelectors)) {
            $browser->pause(1500); // Wait for filter to apply
            $this->takeScreenshot($browser, 'status-filter-applied');
        }
    });
});

test('mobile responsive design works correctly', function () {
    $wrestler = Wrestler::factory()->create(['name' => 'Mobile Test Wrestler']);

    $this->browse(function (Browser $browser) use ($wrestler) {
        $browser->resize(375, 667) // iPhone SE dimensions
                ->loginAs($this->getAdminUser())
                ->visit('/roster/wrestlers');
        
        $this->waitForPageLoad($browser);
        
        $browser->assertPathIs('/roster/wrestlers')
                ->assertSee('Mobile Test Wrestler');
        
        $this->takeScreenshot($browser, 'mobile-responsive-table');

        // Test navigation to detail page on mobile
        $browser->visit("/roster/wrestlers/{$wrestler->id}");
        
        $this->waitForPageLoad($browser);
        
        $browser->assertSee($wrestler->name);
        $this->takeScreenshot($browser, 'mobile-responsive-detail');
    });
});

test('navigation between index and detail works', function () {
    $wrestler = Wrestler::factory()->create(['name' => 'Navigation Test Wrestler']);

    $this->browse(function (Browser $browser) use ($wrestler) {
        $browser->loginAs($this->getAdminUser())
                ->visit('/roster/wrestlers');
        
        $this->waitForPageLoad($browser);
        
        $browser->assertSee('Navigation Test Wrestler');
        $this->takeScreenshot($browser, 'before-navigation');

        // Navigate to detail page
        $browser->visit("/roster/wrestlers/{$wrestler->id}");
        
        $this->waitForPageLoad($browser);
        
        $browser->assertSee($wrestler->name)
                ->assertPathIs("/roster/wrestlers/{$wrestler->id}");
        
        $this->takeScreenshot($browser, 'after-navigation-to-detail');

        // Navigate back to index
        $browser->visit('/roster/wrestlers');
        
        $this->waitForPageLoad($browser);
        
        $browser->assertPathIs('/roster/wrestlers')
                ->assertSee($wrestler->name);
        
        $this->takeScreenshot($browser, 'back-to-index');
    });
});

test('page handles no wrestlers gracefully', function () {
    // Ensure no wrestlers exist
    Wrestler::query()->delete();

    $this->browse(function (Browser $browser) {
        $browser->loginAs($this->getAdminUser())
                ->visit('/roster/wrestlers');
        
        $this->waitForPageLoad($browser);
        
        $browser->assertPathIs('/roster/wrestlers');
        
        // Table should still exist even with no data
        $this->assertElementPresent($browser, ['table', '.table', '[role="table"]']);
        
        $this->takeScreenshot($browser, 'empty-wrestlers-table');
    });
});

test('wrestler actions are visible in table', function () {
    $wrestler = Wrestler::factory()->create(['name' => 'Action Test Wrestler']);

    $this->browse(function (Browser $browser) use ($wrestler) {
        $browser->loginAs($this->getAdminUser())
                ->visit('/roster/wrestlers');
        
        $this->waitForPageLoad($browser);
        
        $browser->assertSee($wrestler->name);

        // Look for action buttons or dropdown in the table
        $actionSelectors = [
            '.actions',
            '.action-buttons', 
            '[data-actions]',
            'button',
            '.dropdown',
            '.btn-group'
        ];

        $this->assertElementPresent($browser, $actionSelectors);
        
        // At minimum, verify the page loaded correctly even if we can't find specific actions
        $browser->assertSee($wrestler->name);
        $this->takeScreenshot($browser, 'wrestler-actions-test-complete');
    });
});

test('wrestler height displays correctly', function () {
    $wrestler = Wrestler::factory()->create([
        'name' => 'Height Test Wrestler',
        'height' => 73 // 6'1"
    ]);

    $this->browse(function (Browser $browser) use ($wrestler) {
        $browser->loginAs($this->getAdminUser())
                ->visit("/roster/wrestlers/{$wrestler->id}");
        
        $this->waitForPageLoad($browser);
        
        $browser->assertSee($wrestler->name);
        // Look for height display (could be in various formats)
        $this->takeScreenshot($browser, 'wrestler-height-display');
    });
});