<?php

declare(strict_types=1);

use App\Models\Wrestlers\Wrestler;
use Laravel\Dusk\Browser;

/**
 * Browser tests for wrestler management visual workflows.
 * 
 * These tests focus on visual elements, user interactions, and browser behavior
 * that Feature tests cannot cover. These tests use Laravel Dusk for full
 * browser automation.
 */

describe('Wrestler Creation Visual Workflow', function () {
    test('wrestler creation modal displays correctly and accepts input', function () {
        // Given: An authenticated administrator
        $admin = administrator();
        
        // When & Then: Test the wrestler creation workflow
        $this->browse(function (Browser $browser) use ($admin) {
            $browser->loginAs($admin)
                    ->visit('/roster/wrestlers')
                    ->screenshot('wrestlers-index')
                    ->pause(2000) // Give page time to load
                    ->assertPathIs('/roster/wrestlers')
                    ->assertTitle('Laravel');
        });
    });

    test('basic browser functionality works', function () {
        // When & Then: Test basic browser functionality
        $this->browse(function (Browser $browser) {
            $browser->visit('/')
                    ->screenshot('homepage-visit')
                    ->assertTitle('Laravel'); // Basic assertion that browser works
        });
    });

    test('wrestler detail page can be accessed', function () {
        // Given: A wrestler with complete information
        $wrestler = Wrestler::factory()->create([
            'name' => 'Stone Cold Steve Austin',
            'hometown' => 'Austin, TX',
            'height' => 73, // 6'1"
            'weight' => 252,
            'signature_move' => 'Stone Cold Stunner'
        ]);
        
        // When & Then: Test accessing wrestler detail page
        $this->browse(function (Browser $browser) use ($wrestler) {
            $browser->loginAs(administrator())
                    ->visit("/roster/wrestlers/{$wrestler->id}")
                    ->screenshot('wrestler-detail')
                    ->assertSee($wrestler->name)
                    ->assertSee($wrestler->hometown)
                    ->assertPathIs("/roster/wrestlers/{$wrestler->id}");
        });
    });
});

describe('Wrestler Table Interaction Workflow', function () {
    test('wrestlers index page has basic table structure', function () {
        // When & Then: Verify the page has basic table structure
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/roster/wrestlers')
                    ->screenshot('wrestlers-page-structure')
                    ->pause(2000) // Wait for Livewire to load
                    ->assertPathIs('/roster/wrestlers');
                    
            // Check if basic page elements exist
            if ($browser->element('table, .table, [role="table"]')) {
                $browser->screenshot('table-structure-found');
            } else {
                $browser->screenshot('no-table-structure');
            }
        });
    });
});

describe('Wrestler Detail Page Visual Workflow', function () {
    test('wrestler detail page displays wrestler information', function () {
        // Given: A wrestler with complete information
        $wrestler = Wrestler::factory()->create([
            'name' => 'Stone Cold Steve Austin',
            'hometown' => 'Austin, TX',
            'height' => 73, // 6'1"
            'weight' => 252,
            'signature_move' => 'Stone Cold Stunner'
        ]);
        
        // When & Then: Verify wrestler detail page displays information
        $this->browse(function (Browser $browser) use ($wrestler) {
            $browser->loginAs(administrator())
                    ->visit("/roster/wrestlers/{$wrestler->id}")
                    ->screenshot('wrestler-detail-page')
                    ->assertSee($wrestler->name)
                    ->assertSee($wrestler->hometown)
                    ->assertPathIs("/roster/wrestlers/{$wrestler->id}");
        });
    });
});

describe('Navigation and Responsive Design', function () {
    test('wrestler management interface works on mobile viewport', function () {
        // Given: A wrestler to display
        $wrestler = Wrestler::factory()->create(['name' => 'Mobile Test Wrestler']);
        
        // When & Then: Test mobile viewport functionality
        $this->browse(function (Browser $browser) use ($wrestler) {
            $browser->resize(375, 667) // iPhone SE dimensions
                    ->loginAs(administrator())
                    ->visit('/roster/wrestlers')
                    ->screenshot('mobile-wrestlers')
                    ->pause(2000)
                    ->assertPathIs('/roster/wrestlers');
        });
    });
    
    test('navigation between wrestlers index and detail works', function () {
        // Given: A wrestler to navigate to
        $wrestler = Wrestler::factory()->create(['name' => 'Navigation Test Wrestler']);
        
        // When & Then: Test navigation workflow
        $this->browse(function (Browser $browser) use ($wrestler) {
            $browser->loginAs(administrator())
                    ->visit('/roster/wrestlers')
                    ->screenshot('before-navigation')
                    ->pause(2000)
                    ->visit("/roster/wrestlers/{$wrestler->id}")
                    ->screenshot('after-navigation')
                    ->assertSee($wrestler->name)
                    ->assertPathIs("/roster/wrestlers/{$wrestler->id}");
        });
    });
});