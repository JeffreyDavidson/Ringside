<?php

declare(strict_types=1);

use App\Models\Titles\Title;
use App\Models\Titles\TitleChampionship;
use App\Models\Wrestlers\Wrestler;
use App\Models\TagTeams\TagTeam;
use Laravel\Dusk\Browser;

/**
 * Browser tests for title management visual workflows.
 * 
 * These tests focus on visual elements, user interactions, and browser behavior
 * that Feature tests cannot cover. These tests use Laravel Dusk for full
 * browser automation.
 */

describe('Title Creation Visual Workflow', function () {
    test('title creation modal displays correctly and accepts input', function () {
        // Given: An authenticated administrator
        $admin = administrator();
        
        // When & Then: Test the title creation workflow
        $this->browse(function (Browser $browser) use ($admin) {
            $browser->loginAs($admin)
                    ->visit('/titles')
                    ->screenshot('titles-index')
                    ->pause(2000) // Give page time to load
                    ->assertPathIs('/titles')
                    ->assertTitle('Laravel');
        });
    });

    test('basic browser functionality works for titles', function () {
        // When & Then: Test basic browser functionality
        $this->browse(function (Browser $browser) {
            $browser->visit('/')
                    ->screenshot('homepage-visit-titles')
                    ->assertTitle('Laravel'); // Basic assertion that browser works
        });
    });

    test('title detail page can be accessed', function () {
        // Given: A title with complete information
        $title = Title::factory()->active()->create([
            'name' => 'World Heavyweight Championship',
            'type' => 'singles',
        ]);
        
        // When & Then: Test accessing title detail page
        $this->browse(function (Browser $browser) use ($title) {
            $browser->loginAs(administrator())
                    ->visit("/titles/{$title->id}")
                    ->screenshot('title-detail')
                    ->assertSee($title->name)
                    ->assertSee('World Heavyweight Championship')
                    ->assertPathIs("/titles/{$title->id}");
        });
    });
});

describe('Title Table Interaction Workflow', function () {
    test('titles index page has basic table structure', function () {
        // When & Then: Verify the page has basic table structure
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/titles')
                    ->screenshot('titles-page-structure')
                    ->pause(2000) // Wait for Livewire to load
                    ->assertPathIs('/titles');
                    
            // Check if basic page elements exist
            if ($browser->element('table, .table, [role="table"]')) {
                $browser->screenshot('titles-table-structure-found');
            } else {
                $browser->screenshot('titles-no-table-structure');
            }
        });
    });

    test('title actions dropdown functionality', function () {
        // Given: A title that can have actions performed on it
        $title = Title::factory()->active()->create([
            'name' => 'Action Test Championship'
        ]);

        // When & Then: Test action dropdown interactions
        $this->browse(function (Browser $browser) use ($title) {
            $browser->loginAs(administrator())
                    ->visit('/titles')
                    ->screenshot('before-title-actions')
                    ->pause(3000); // Wait for page to fully load

            // Look for action elements (specific selectors depend on implementation)
            if ($browser->element('[data-testid="title-actions"]')) {
                $browser->screenshot('title-actions-found');
            } else {
                $browser->screenshot('title-actions-not-found');
            }
        });
    });

    test('title search functionality works visually', function () {
        // Given: Multiple titles to search through
        Title::factory()->create(['name' => 'World Championship']);
        Title::factory()->create(['name' => 'Intercontinental Title']);
        Title::factory()->create(['name' => 'Tag Team Championships']);

        // When & Then: Test search functionality
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/titles')
                    ->screenshot('before-title-search')
                    ->pause(2000);

            // Look for search input (specific selector depends on implementation)
            if ($browser->element('input[type="search"], input[placeholder*="search"], .search-input')) {
                $browser->type('input[type="search"], input[placeholder*="search"], .search-input', 'World')
                        ->pause(1000)
                        ->screenshot('after-title-search')
                        ->assertSee('World Championship');
            } else {
                $browser->screenshot('title-search-input-not-found');
            }
        });
    });
});

describe('Title Detail Page Visual Workflow', function () {
    test('title detail page displays title information correctly', function () {
        // Given: A title with complete information
        $title = Title::factory()->active()->create([
            'name' => 'Ultimate Championship',
            'type' => 'singles',
        ]);
        
        // When & Then: Verify title detail page displays information
        $this->browse(function (Browser $browser) use ($title) {
            $browser->loginAs(administrator())
                    ->visit("/titles/{$title->id}")
                    ->screenshot('title-detail-page')
                    ->assertSee($title->name)
                    ->assertSee('Ultimate Championship')
                    ->assertPathIs("/titles/{$title->id}");
        });
    });

    test('title detail page shows championship information', function () {
        // Given: A title with a current champion
        $title = Title::factory()->active()->create([
            'name' => 'Championship with Holder',
        ]);
        
        $wrestler = Wrestler::factory()->bookable()->create([
            'name' => 'Current Champion'
        ]);

        TitleChampionship::factory()
            ->for($title, 'title')
            ->for($wrestler, 'champion')
            ->current()
            ->create();
        
        // When & Then: Verify championship information is displayed
        $this->browse(function (Browser $browser) use ($title, $wrestler) {
            $browser->loginAs(administrator())
                    ->visit("/titles/{$title->id}")
                    ->screenshot('title-with-champion')
                    ->assertSee($title->name)
                    ->assertSee($wrestler->name)
                    ->assertSee('Current Champion');
        });
    });

    test('vacant title displays correctly', function () {
        // Given: A title without a current champion
        $title = Title::factory()->active()->create([
            'name' => 'Vacant Championship',
        ]);
        
        // When & Then: Verify vacant title display
        $this->browse(function (Browser $browser) use ($title) {
            $browser->loginAs(administrator())
                    ->visit("/titles/{$title->id}")
                    ->screenshot('vacant-title')
                    ->assertSee($title->name)
                    ->assertSee('Vacant');
        });
    });
});

describe('Navigation and Responsive Design', function () {
    test('title management interface works on mobile viewport', function () {
        // Given: A title to display
        $title = Title::factory()->create(['name' => 'Mobile Test Championship']);
        
        // When & Then: Test mobile viewport functionality
        $this->browse(function (Browser $browser) use ($title) {
            $browser->resize(375, 667) // iPhone SE dimensions
                    ->loginAs(administrator())
                    ->visit('/titles')
                    ->screenshot('mobile-titles')
                    ->pause(2000)
                    ->assertPathIs('/titles');
        });
    });
    
    test('navigation between titles index and detail works', function () {
        // Given: A title to navigate to
        $title = Title::factory()->create(['name' => 'Navigation Test Championship']);
        
        // When & Then: Test navigation workflow
        $this->browse(function (Browser $browser) use ($title) {
            $browser->loginAs(administrator())
                    ->visit('/titles')
                    ->screenshot('before-title-navigation')
                    ->pause(2000)
                    ->visit("/titles/{$title->id}")
                    ->screenshot('after-title-navigation')
                    ->assertSee($title->name)
                    ->assertPathIs("/titles/{$title->id}");
        });
    });

    test('titles table responsive design works correctly', function () {
        // Given: Multiple titles to test table responsiveness
        Title::factory()->count(5)->create();
        
        // When & Then: Test responsive table behavior
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/titles');

            // Test desktop view
            $browser->resize(1200, 800)
                    ->screenshot('titles-desktop-view')
                    ->pause(1000);

            // Test tablet view
            $browser->resize(768, 1024)
                    ->screenshot('titles-tablet-view')
                    ->pause(1000);

            // Test mobile view
            $browser->resize(375, 667)
                    ->screenshot('titles-mobile-view')
                    ->pause(1000);
        });
    });
});

describe('Title Form Modal Interactions', function () {
    test('create title modal opens and accepts input', function () {
        // When & Then: Test title creation modal
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/titles')
                    ->screenshot('before-create-modal')
                    ->pause(2000);

            // Look for create button (selector depends on implementation)
            if ($browser->element('[data-testid="create-title"], .btn-create, button:contains("Create")')) {
                $browser->click('[data-testid="create-title"], .btn-create, button:contains("Create")')
                        ->pause(1000)
                        ->screenshot('create-modal-opened');

                // Test form input if modal opened
                if ($browser->element('.modal, [role="dialog"]')) {
                    $browser->screenshot('title-modal-form-visible');
                } else {
                    $browser->screenshot('title-modal-not-visible');
                }
            } else {
                $browser->screenshot('create-button-not-found');
            }
        });
    });

    test('edit title modal functionality', function () {
        // Given: A title to edit
        $title = Title::factory()->create(['name' => 'Editable Championship']);

        // When & Then: Test edit modal functionality
        $this->browse(function (Browser $browser) use ($title) {
            $browser->loginAs(administrator())
                    ->visit('/titles')
                    ->screenshot('before-edit-modal')
                    ->pause(2000);

            // Look for edit action (selector depends on implementation)
            if ($browser->element('[data-testid="edit-title"], .btn-edit')) {
                $browser->click('[data-testid="edit-title"], .btn-edit')
                        ->pause(1000)
                        ->screenshot('edit-modal-opened');
            } else {
                $browser->screenshot('edit-button-not-found');
            }
        });
    });
});

describe('Title Status Management Visual Workflow', function () {
    test('title status transitions work visually', function () {
        // Given: An undebuted title
        $title = Title::factory()->create(['name' => 'Status Test Championship']);

        // When & Then: Test status transition visual feedback
        $this->browse(function (Browser $browser) use ($title) {
            $browser->loginAs(administrator())
                    ->visit('/titles')
                    ->screenshot('title-status-before')
                    ->pause(2000);

            // Look for status indicators
            if ($browser->element('.badge, .status, [data-testid="title-status"]')) {
                $browser->screenshot('title-status-badges-found');
            } else {
                $browser->screenshot('title-status-badges-not-found');
            }
        });
    });

    test('championship assignment visual workflow', function () {
        // Given: An active title and potential champion
        $title = Title::factory()->active()->create(['name' => 'Championship Assignment Test']);
        $wrestler = Wrestler::factory()->bookable()->create(['name' => 'Potential Champion']);

        // When & Then: Test championship assignment visual workflow
        $this->browse(function (Browser $browser) use ($title) {
            $browser->loginAs(administrator())
                    ->visit("/titles/{$title->id}")
                    ->screenshot('championship-assignment-page')
                    ->pause(2000);

            // Look for championship management elements
            if ($browser->element('[data-testid="assign-champion"], .assign-champion')) {
                $browser->screenshot('champion-assignment-available');
            } else {
                $browser->screenshot('champion-assignment-not-found');
            }
        });
    });
});

describe('Error Handling and Edge Cases', function () {
    test('browser handles non-existent title gracefully', function () {
        // When & Then: Test accessing non-existent title
        $this->browse(function (Browser $browser) {
            $browser->loginAs(administrator())
                    ->visit('/titles/99999')
                    ->screenshot('non-existent-title')
                    ->pause(1000);

            // Should show 404 or appropriate error
            $status = $browser->driver->executeScript('return document.readyState');
            expect($status)->toBe('complete');
        });
    });

    test('browser handles unauthorized access gracefully', function () {
        // Given: A basic user (non-admin)
        $basicUser = basicUser();
        $title = Title::factory()->create();

        // When & Then: Test unauthorized access
        $this->browse(function (Browser $browser) use ($basicUser, $title) {
            $browser->loginAs($basicUser)
                    ->visit("/titles/{$title->id}")
                    ->screenshot('unauthorized-title-access')
                    ->pause(1000);

            // Should show 403 or redirect to appropriate page
            $currentUrl = $browser->driver->getCurrentURL();
            expect($currentUrl)->not->toContain("/titles/{$title->id}");
        });
    });
});